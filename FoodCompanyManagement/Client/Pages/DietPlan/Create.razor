@page "/dietPlans/create"
@inject HttpClient _client
@inject NavigationManager _navManager
@inject IJSRuntime js
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims

<h3>Create a diet plan</h3>

<br />

<EditForm Model="@dietPlan" OnValidSubmit="CreatePlanData">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<div class="form-group">
		<label>What does your main meal consist of? </label>
		<div>
			<InputSelect @bind-Value="@_survey.q1" class="form-control">
				<option value="">-- Select Restriction --</option>
				<option value="@_survey.q1">Fish</option>
				<option value="@_survey.q1">Vegetables</option>
			</InputSelect>
			<ValidationMessage For="@(() => _survey.q1)" />
		</div>
	</div>
	<div class="form-group">
		<label>Are you able to consume diary? </label>
		<div>
			<InputSelect @bind-Value="@_survey.q2" class="form-control">
				<option value="">-- Select Restriction --</option>
				<option value="@_survey.q2">Yes</option>
				<option value="@_survey.q2">No</option>
			</InputSelect>
			<ValidationMessage For="@(() => _survey.q2)" />
		</div>
	</div>

	<button type="submit" class="btn btn-success btn-block">
		Create diet plan
	</button>

</EditForm>

@code {
	private List<ProfileData> ProfileDatas;
	DietPlan dietPlan = new DietPlan();
	User_DietPlan uDietPlan = new User_DietPlan();

	private List<AppUser> AppUsers;
	private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
	private string _currentUserName;
	private ProfileData _currentProfData;

	private DietOptions[] options;
	Survey _survey = new Survey();
	public class Survey
	{
		public string q1 { get; set; } = "none";
		public string q2 { get; set; } = "none";
	}

	protected override async Task OnInitializedAsync()
	{
		options = await _client.GetFromJsonAsync<DietOptions[]>("Survey JSONs/surveyJSON.json");
		ProfileDatas = await _client.GetFromJsonAsync<List<ProfileData>>($"{Endpoints.ProfileDatasEndpoint}");
		AppUsers = await _client.GetFromJsonAsync<List<AppUser>>($"{Endpoints.AccountsEndpoint}");
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		if (user.Identity.IsAuthenticated)
		{
			_claims = user.Claims;
			//_currentUserName = user.Identity.Name;
			if (_claims.Count() > 0)
			{
				foreach (var claim in _claims)
				{
					if (claim.Type == "name")
					{
						_currentUserName = claim.Value;
						continue;
					}
				}
			}
		}
		foreach (var profileData in ProfileDatas)
		{
			if (profileData.CreatedBy == _currentUserName)
			{
				_currentProfData = profileData;
			}
		}
	}


	public class DietOptions
	{
		public string profDataRestriction { get; set; }
		public string q1 { get; set; }
		public string q2 { get; set; }
		public string dietCat { get; set; }
	}

	private async Task CreatePlanData()
	{
		foreach (var option in options)
		{
			if (option.q1 == _survey.q1 && option.q2 == _survey.q2 && option.profDataRestriction == _currentProfData.DietRestriction)
			{
				dietPlan.DietCategory = option.dietCat;
			}
		}
		uDietPlan.DietStart = DateTime.Today;
		uDietPlan.DietEnd = DateTime.Today.AddDays(28);
		uDietPlan.Diet_Id = dietPlan.Id;
		int Weeks = (uDietPlan.DietEnd.DayOfYear - uDietPlan.DietStart.DayOfYear)/7;
		dietPlan.DietWeek = Weeks;
		await _client.PostAsJsonAsync(Endpoints.DietPlansEndpoint, dietPlan);
		_navManager.NavigateTo("/dietPlans/");
	}

}