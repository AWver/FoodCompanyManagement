@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Security.Claims
@inject HttpClient _client
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager

<AuthorizeView>
	<Authorized>
		<a href="authentication/profile">Hello, @context.User.Identity.Name, @_accountStatus!</a>
		<button class="nav-link btn btn-link" @onclick="BeginSignOut">Log out</button>
	</Authorized>
	<NotAuthorized>
		<a href="authentication/register">Register</a>
		<a href="authentication/login">Log in</a>
	</NotAuthorized>
</AuthorizeView>

@code{
	private List<AppUser> AppUsers;
	private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
	private string _currentUserId;
	private string _currentUserName;
	private string _currentUserRole;
	public string _accountStatus;
	protected async override Task OnInitializedAsync()
	{
		AppUsers = await
		_client.GetFromJsonAsync<List<AppUser>>($"{Endpoints.AccountsEndpoint}");
		var authState = await
		AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		if (user.Identity.IsAuthenticated)
		{
			_claims = user.Claims;
			//_currentUserName = user.Identity.Name;
			if (_claims.Count() > 0)
			{
				foreach (var claim in _claims)
				{
					if (claim.Type == "sub")
					{
						_currentUserId = claim.Value;
						continue;
					}
					if (claim.Type == "name")
					{
						_currentUserName = claim.Value;
						continue;
					}
				}
			}
		}
		if (_currentUserId != String.Empty)
		{
			_currentUserRole = await
			_client.GetStringAsync($"{Endpoints.AccountsEndpoint}/{_currentUserId}");
		}
		@foreach (var appUser in AppUsers)
		{
			if (appUser.UserName == _currentUserName)
			{
				if (appUser.isStaff == true)
				{
					_accountStatus = "Staff Account";
				}
				else
				{
					_accountStatus = "Regular Account";
				}
			}
		}
		}

		private async Task BeginSignOut(MouseEventArgs args)
		{
			await SignOutManager.SetSignOutState();
			Navigation.NavigateTo("authentication/logout");
		}
}
